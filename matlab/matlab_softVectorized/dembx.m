function [Ah, Lstep, h, u, gg] = dembx(ns, Lstep, gg, dk, gtest, ldemb, kkk, gb, ib, pix, u, h)
    %Subroutine that carries out the conjugate gradient relaxation process

    % Initialize the conjugate direction vector on first call to dembx only
    % For calls to dembx after the first, we want to continue using the
    % value of h determined in the previous call. Of course, if npoints is
    % greater than 1, this initialization step will be run for every new
    % microstructure used, as kkk is reset to 1 every time the counter micro
    % is increased.

    if kkk == 1
       h = gb; 
    end

    % Lstep counts the number of conjugate gradient steps taken in
    % each call to dembx
    Lstep = 0;
    for ijk=1:ldemb
        Lstep = Lstep + 1;
        Ah = zeros(ns, 3);

        % Do global matrix multiply via small stiffness matrices, Ah = A * h
        % The long statement below correctly brings in all the terms from
        % the global matrix A using only the small stiffness matrices dk.

        for j=1:3
            for n=1:3
                 Ah(:,j)=Ah(:,j)+h(ib(:,1),n).*( dk(pix(ib(:,27)),1,j,4,n)...
                +dk(pix(ib(:,7)),2,j,3,n)...
                +dk(pix(ib(:,25)),5,j,8,n)+dk(pix(ib(:,15)),6,j,7,n) )+...
                h(ib(:,2),n).*( dk(pix(ib(:,27)),1,j,3,n)...
                +dk(pix(ib(:,25)),5,j,7,n) )+...
                h(ib(:,3),n).*( dk(pix(ib(:,27)),1,j,2,n)+dk(pix(ib(:,5)),4,j,3,n)+...
                dk(pix(ib(:,13)),8,j,7,n)+dk(pix(ib(:,25)),5,j,6,n) )+...
                h(ib(:,4),n).*( dk(pix(ib(:,5)),4,j,2,n)...
                +dk(pix(ib(:,13)),8,j,6,n) )+...
                h(ib(:,5),n).*( dk(pix(ib(:,6)),3,j,2,n)+dk(pix(ib(:,5)),4,j,1,n)+...
                dk(pix(ib(:,14)),7,j,6,n)+dk(pix(ib(:,13)),8,j,5,n) )+...
                h(ib(:,6),n).*( dk(pix(ib(:,6)),3,j,1,n)...
                +dk(pix(ib(:,14)),7,j,5,n) )+...
                h(ib(:,7),n).*( dk(pix(ib(:,6)),3,j,4,n)+dk(pix(ib(:,7)),2,j,1,n)+...
                dk(pix(ib(:,14)),7,j,8,n)+dk(pix(ib(:,15)),6,j,5,n) )+...
                h(ib(:,8),n).*( dk(pix(ib(:,7)),2,j,4,n)...
                +dk(pix(ib(:,15)),6,j,8,n) )+...
                h(ib(:,9),n).*( dk(pix(ib(:,25)),5,j,4,n)...
                +dk(pix(ib(:,15)),6,j,3,n) )+...
                h(ib(:,10),n).*( dk(pix(ib(:,25)),5,j,3,n) )+...
                h(ib(:,11),n).*( dk(pix(ib(:,13)),8,j,3,n)...
                +dk(pix(ib(:,25)),5,j,2,n) )+...
                h(ib(:,12),n).*( dk(pix(ib(:,13)),8,j,2,n) )+...
                h(ib(:,13),n).*( dk(pix(ib(:,13)),8,j,1,n)...
                +dk(pix(ib(:,14)),7,j,2,n) )+...
                h(ib(:,14),n).*( dk(pix(ib(:,14)),7,j,1,n) )+...
                h(ib(:,15),n).*( dk(pix(ib(:,14)),7,j,4,n)...
                +dk(pix(ib(:,15)),6,j,1,n) )+...
                h(ib(:,16),n).*( dk(pix(ib(:,15)),6,j,4,n) )+...
                h(ib(:,17),n).*( dk(pix(ib(:,27)),1,j,8,n)...
                +dk(pix(ib(:,7)),2,j,7,n) )+...
                h(ib(:,18),n).*( dk(pix(ib(:,27)),1,j,7,n) )+...
                h(ib(:,19),n).*( dk(pix(ib(:,27)),1,j,6,n)...
                +dk(pix(ib(:,5)),4,j,7,n) )+...
                h(ib(:,20),n).*( dk(pix(ib(:,5)),4,j,6,n) )+...
                h(ib(:,21),n).*( dk(pix(ib(:,5)),4,j,5,n)...
                +dk(pix(ib(:,6)),3,j,6,n) )+...
                h(ib(:,22),n).*( dk(pix(ib(:,6)),3,j,5,n) )+...
                h(ib(:,23),n).*( dk(pix(ib(:,6)),3,j,8,n)...
                +dk(pix(ib(:,7)),2,j,5,n) )+...
                h(ib(:,24),n).*( dk(pix(ib(:,7)),2,j,8,n) )+...
                h(ib(:,25),n).*( dk(pix(ib(:,14)),7,j,3,n)...
                +dk(pix(ib(:,13)),8,j,4,n)+...
                dk(pix(ib(:,15)),6,j,2,n)+dk(pix(ib(:,25)),5,j,1,n) )+...
                h(ib(:,26),n).*( dk(pix(ib(:,6)),3,j,7,n)...
                +dk(pix(ib(:,5)),4,j,8,n)+...
                dk(pix(ib(:,27)),1,j,5,n)+dk(pix(ib(:,7)),2,j,6,n) )+...
                h(ib(:,27),n).*( dk(pix(ib(:,27)),1,j,1,n)...
                +dk(pix(ib(:,7)),2,j,2,n)+...
                dk(pix(ib(:,6)),3,j,3,n)+dk(pix(ib(:,5)),4,j,4,n)...
                +dk(pix(ib(:,25)),5,j,5,n)+...
                dk(pix(ib(:,15)),6,j,6,n)+dk(pix(ib(:,14)),7,j,7,n)+...
                dk(pix(ib(:,13)),8,j,8,n) );
            end
        end

        hAh = sum(h(:).*Ah(:));

        lambda=gg/hAh;
        
        u = u - lambda*h;
        gb = gb - lambda*Ah; 
        
        gglast=gg;
        gg=sum(gb(:).^2);

        if(gg<gtest) 
            break;
        end

        gamma=gg/gglast;

        h = gb + gamma*h;
    end

end


