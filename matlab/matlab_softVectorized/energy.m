function [gb,utot] = energy(ns,C,ib,u,pix,dk,b)
% Subroutine computes the total energy, utot, and the gradient, gb

    gb = zeros(ns, 3);

    %  Do global matrix multiply via small stiffness matrices, gb = A * u
    %  The long statement below correctly brings in all the terms from
    %  the global matrix A using only the small stiffness matrices.

    for j=1:3
        for n=1:3
            gb(:,j)=gb(:,j)+u(ib(:,1),n).*( dk(pix(ib(:,27)),1,j,4,n)...
            +dk(pix(ib(:,7)),2,j,3,n)...
            +dk(pix(ib(:,25)),5,j,8,n)+dk(pix(ib(:,15)),6,j,7,n) )+...
            u(ib(:,2),n).*( dk(pix(ib(:,27)),1,j,3,n)...
            +dk(pix(ib(:,25)),5,j,7,n) )+...
            u(ib(:,3),n).*( dk(pix(ib(:,27)),1,j,2,n)+dk(pix(ib(:,5)),4,j,3,n)+...
            dk(pix(ib(:,13)),8,j,7,n)+dk(pix(ib(:,25)),5,j,6,n) )+...
            u(ib(:,4),n).*( dk(pix(ib(:,5)),4,j,2,n)...
            +dk(pix(ib(:,13)),8,j,6,n) )+...
            u(ib(:,5),n).*( dk(pix(ib(:,6)),3,j,2,n)+dk(pix(ib(:,5)),4,j,1,n)+...
            dk(pix(ib(:,14)),7,j,6,n)+dk(pix(ib(:,13)),8,j,5,n) )+...
            u(ib(:,6),n).*( dk(pix(ib(:,6)),3,j,1,n)...
            +dk(pix(ib(:,14)),7,j,5,n) )+...
            u(ib(:,7),n).*( dk(pix(ib(:,6)),3,j,4,n)+dk(pix(ib(:,7)),2,j,1,n)+...
            dk(pix(ib(:,14)),7,j,8,n)+dk(pix(ib(:,15)),6,j,5,n) )+...
            u(ib(:,8),n).*( dk(pix(ib(:,7)),2,j,4,n)...
            +dk(pix(ib(:,15)),6,j,8,n) )+...
            u(ib(:,9),n).*( dk(pix(ib(:,25)),5,j,4,n)...
            +dk(pix(ib(:,15)),6,j,3,n) )+...
            u(ib(:,10),n).*( dk(pix(ib(:,25)),5,j,3,n) )+...
            u(ib(:,11),n).*( dk(pix(ib(:,13)),8,j,3,n)...
            +dk(pix(ib(:,25)),5,j,2,n) )+...
            u(ib(:,12),n).*( dk(pix(ib(:,13)),8,j,2,n) )+...
            u(ib(:,13),n).*( dk(pix(ib(:,13)),8,j,1,n)...
            +dk(pix(ib(:,14)),7,j,2,n) )+...
            u(ib(:,14),n).*( dk(pix(ib(:,14)),7,j,1,n) )+...
            u(ib(:,15),n).*( dk(pix(ib(:,14)),7,j,4,n)...
            +dk(pix(ib(:,15)),6,j,1,n) )+...
            u(ib(:,16),n).*( dk(pix(ib(:,15)),6,j,4,n) )+...
            u(ib(:,17),n).*( dk(pix(ib(:,27)),1,j,8,n)...
            +dk(pix(ib(:,7)),2,j,7,n) )+...
            u(ib(:,18),n).*( dk(pix(ib(:,27)),1,j,7,n) )+...
            u(ib(:,19),n).*( dk(pix(ib(:,27)),1,j,6,n)...
            +dk(pix(ib(:,5)),4,j,7,n) )+...
            u(ib(:,20),n).*( dk(pix(ib(:,5)),4,j,6,n) )+...
            u(ib(:,21),n).*( dk(pix(ib(:,5)),4,j,5,n)...
            +dk(pix(ib(:,6)),3,j,6,n) )+...
            u(ib(:,22),n).*( dk(pix(ib(:,6)),3,j,5,n) )+...
            u(ib(:,23),n).*( dk(pix(ib(:,6)),3,j,8,n)...
            +dk(pix(ib(:,7)),2,j,5,n) )+...
            u(ib(:,24),n).*( dk(pix(ib(:,7)),2,j,8,n) )+...
            u(ib(:,25),n).*( dk(pix(ib(:,14)),7,j,3,n)...
            +dk(pix(ib(:,13)),8,j,4,n)+...
            dk(pix(ib(:,15)),6,j,2,n)+dk(pix(ib(:,25)),5,j,1,n) )+...
            u(ib(:,26),n).*( dk(pix(ib(:,6)),3,j,7,n)...
            +dk(pix(ib(:,5)),4,j,8,n)+...
            dk(pix(ib(:,27)),1,j,5,n)+dk(pix(ib(:,7)),2,j,6,n) )+...
            u(ib(:,27),n).*( dk(pix(ib(:,27)),1,j,1,n)...
            +dk(pix(ib(:,7)),2,j,2,n)+...
            dk(pix(ib(:,6)),3,j,3,n)+dk(pix(ib(:,5)),4,j,4,n)...
            +dk(pix(ib(:,25)),5,j,5,n)+...
            dk(pix(ib(:,15)),6,j,6,n)+dk(pix(ib(:,14)),7,j,7,n)+...
            dk(pix(ib(:,13)),8,j,8,n) );

        end
    end

    utot = C + 0.5*sum(u(:).*gb(:)) + sum(b(:).*u(:));
    gb = gb + b;

end

